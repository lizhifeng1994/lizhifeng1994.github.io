<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[矩阵和字符串旋转]]></title>
      <url>https://yoursite.com/2017/01/17/%E7%9F%A9%E9%98%B5%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>这里有三道题目记录一下</p>
<a id="more"></a>
<p>1.给定一副N*N矩阵表示的的图像，其中每个图像的像素大小为4字节，编写一个方法，将图像旋转90°。不占用额外的内存空间</p>
<p>首先我们这里可以举例说明</p>
<p>1 2 3   |  7 2 1   |  7 4 1<br>4 5 6   |  4 5 6   |  8 5 2<br>7 8 9   |  9 8 3   |  9 6 3</p>
<p>我们可以发现 左-&gt;上 下-&gt;左 右-&gt;下 上-&gt;右  这样的一个旋转</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">  <span class="comment">//外层循环控制旋转几次</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> layer=<span class="number">0</span>;layer&lt;n/<span class="number">2</span>;layer++)&#123;</div><div class="line">    <span class="keyword">int</span> first = layer;</div><div class="line">    <span class="keyword">int</span> last = n-layer-<span class="number">1</span>;</div><div class="line">    <span class="comment">//每次旋转要调整的位置</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;last;i++)&#123;</div><div class="line">      <span class="comment">//偏移量</span></div><div class="line">      <span class="keyword">int</span> coffset = i - first;</div><div class="line">      </div><div class="line">      <span class="keyword">int</span> top = a[first][i];</div><div class="line">      </div><div class="line">      <span class="comment">//左到上</span></div><div class="line">      a[first][i] = a[last-coffset][first];</div><div class="line"></div><div class="line">      <span class="comment">//下到左</span></div><div class="line">      a[last-coffset][first] = a[last][last-coffset];</div><div class="line">      </div><div class="line">      <span class="comment">//右到下</span></div><div class="line">      a[last][last-coffset] = a[i][last];</div><div class="line">      </div><div class="line">      <span class="comment">//上到右</span></div><div class="line">      a[i][last] = top;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.编写一个算法，若M*N矩阵中某个元素为0，则将其所在的行与列清零。</p>
<p>当你想：元素为0，则所在行与列都清0，但是你又会遍历到，然后你整个矩阵都是0了。<br>所以你要记录元素为0，i和j的值，然后再遍历整个矩阵，如果(i||j)==0,则把a[i][j]=0。用两个boolean数据记录i，j的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span>[][] a)</span></span>&#123;</div><div class="line">  <span class="comment">//记录i的值，也就是所在的行</span></div><div class="line">  <span class="keyword">boolean</span>[] row = <span class="keyword">new</span> <span class="keyword">boolean</span>[a.length];</div><div class="line">  <span class="comment">//记录j的值，也就是所在列</span></div><div class="line">  <span class="keyword">boolean</span>[] column = <span class="keyword">new</span> <span class="keyword">boolean</span>[a[<span class="number">0</span>].length];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[<span class="number">0</span>].length;j++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i][j]==<span class="number">0</span>)&#123;</div><div class="line">          row[i] = <span class="keyword">true</span>;</div><div class="line">          column[j] = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[<span class="number">0</span>].length;j++)&#123;</div><div class="line">      <span class="keyword">if</span>(row[i]||column[j])&#123;</div><div class="line">        a[i][j] = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.假定有一个方法isSubstring，可检查一个单词是否为其他字符串的字串。给定两个字符串s1和s2，请写代码检查s2是否为s1旋转而成，要求只能调用一次isSubString。(比如waterbootle是erbootlewat旋转而来)</p>
<p>来，先做一个题目<br>设 x = wat, y = erbootle<br>则 s1 = x+y<br>   s2 = y+x</p>
<p>所以 s1+s1 = x+y+x+y 必定包含 y+x = s2;     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(String s1, String s2)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(s1.length() != s2.length())<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="comment">//java中字符串的contains()也就是题目中的isSubString()</span></div><div class="line">  <span class="keyword">return</span> (s1+s1).contains(s2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[确定一个字符串的所有字符是否全部不同]]></title>
      <url>https://yoursite.com/2017/01/15/%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E9%83%A8%E4%B8%8D%E5%90%8C/</url>
      <content type="html"><![CDATA[<p>实现一个算法，确定一个字符串的所有字符是否全部不同？假使不允许使用额外的数据结构，又该如何处理？</p>
<a id="more"></a>
<p>首先我自己的解法</p>
<p>解法一：暴力破解<br>时间复杂度为O(n^2)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(String s)</span></span>&#123;</div><div class="line">  <span class="keyword">char</span>[] cArray = s.toCharArray();</div><div class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cArray.length;i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;cArray.length;j++)&#123;</div><div class="line">      <span class="keyword">if</span>(cArray[i]==cArray[j])&#123;</div><div class="line">        flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> flag;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解法二：运用String字符串相关方法<br>把第i个字符提取出来，和剩下的字符串相比较<br>时间复杂度为O(n^2)<br>因为这里拼接字符串，每次都进行了(n-1)字符拷贝<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(String s)</span></span>&#123;</div><div class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">    String temp = s.substring(<span class="number">0</span>, i)+s.substring(i+<span class="number">1</span>, s.length());</div><div class="line">    <span class="keyword">if</span>(temp.contains(s.subSequence(i,i+<span class="number">1</span>)))&#123;</div><div class="line">      flag = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> flag;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解法三：构建一个布尔数组，索引值i对应的标记指示该字符串是否含有字母表第i个字符。若这个字符第二次出现，则返回false</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"><span class="comment">// ASCII码，只有256个字符</span></div><div class="line">  <span class="keyword">if</span>(s.length()&gt;<span class="number">256</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">boolean</span>[] char_set = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">256</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line"><span class="comment">//  获取s字符串的第i个字符，并且自动转换成int</span></div><div class="line">    <span class="keyword">int</span> temp = s.charAt(i);</div><div class="line">    <span class="keyword">if</span>(char_set[temp]==<span class="keyword">true</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    char_set[temp] = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解法四：使用位运算，只需要一个int变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method4</span><span class="params">(String s)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(s.length()&gt;<span class="number">26</span>) <span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">  <span class="keyword">int</span> checker = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">    <span class="keyword">int</span> val = s.charAt(i)-<span class="string">'a'</span>;</div><div class="line">    <span class="keyword">if</span>((checker &amp; (<span class="number">1</span>&lt;&lt;val))&gt;<span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    checker |= (<span class="number">1</span>&lt;&lt;val);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们以”helho”举例<br>‘a’ASCII为97</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>val</th>
<th>checker</th>
<th>1&lt;&lt;val</th>
<th>checker&amp;(1&lt;&lt;val)</th>
<th>(checkerI(1&lt;&lt;val)</th>
</tr>
</thead>
<tbody>
<tr>
<td>h-104</td>
<td>7</td>
<td>0</td>
<td>2^7</td>
<td>0</td>
<td>2^7</td>
</tr>
<tr>
<td>e-101</td>
<td>4</td>
<td>2^7</td>
<td>2^4</td>
<td>0</td>
<td>2^7+2^4</td>
</tr>
<tr>
<td>l-108</td>
<td>11</td>
<td>2^7+2^4</td>
<td>2^11</td>
<td>0</td>
<td>2^11+2^7+2^4</td>
</tr>
<tr>
<td>h-104</td>
<td>7</td>
<td>2^11+2^7+2^4</td>
<td>2^7</td>
<td>2^7 返回false</td>
</tr>
<tr>
<td>如果是大写的话</td>
</tr>
<tr>
<td>H-72</td>
<td>-25</td>
<td>2^11+2^7+2^4</td>
<td>2^7</td>
<td>2^7返回false </td>
</tr>
</tbody>
</table>
<p>这个算法的精妙之处在于我们用位运算+int保存了那个唯一的val，当val再次出现的时候，就立即返回false。但是通过上面的表格我们也可以看出认为大小写是一样的。所以这里字符串要不是a-z或者A-Z。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git基本概念和操作]]></title>
      <url>https://yoursite.com/2017/01/10/Git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>简单介绍Git的基本概念和操作，也算是一个简单的笔记记录。</p>
<a id="more"></a>
<h2 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h2><p>Git英语解释“a person, especially a man, who is stupid or unpleasant”</p>
<p>Git的作者说过：“I’m an egotistical bastard, and I name all my projects after myself. First Linux, now git.”</p>
<p>呵呵！！</p>
<p>Git是一个分布式管理工具</p>
<h2 id="Git的三种状态以及对应的三个工作区"><a href="#Git的三种状态以及对应的三个工作区" class="headerlink" title="Git的三种状态以及对应的三个工作区"></a>Git的三种状态以及对应的三个工作区</h2><p>已提交(committed):表示数据已经安全的保存在本地数据库中。–Git仓库</p>
<p>已修改(modified):表示已修改了文件，但还没保存到数据库中。–工作目录</p>
<p>已暂存(staged):表示对一个已修改的文件的当前版本做了标记，使之包含在下次提交的快照中。–暂存区域</p>
<p>如果Git目录中保存着的特定版本文件，就属于已提交状态。如果做了修改并已放入暂存区域，就属于已暂存状态。如果自上次取出之后，做了修改但还没有放到暂存区域，就是已修改状态。</p>
<h2 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h2><p>配置用户信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"John Doe"</span></div><div class="line">git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure>
<p>查看用户信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
<p>获取帮助</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">help</span> //有详细的操作说明</div></pre></td></tr></table></figure>
<p>初始化仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p>克隆仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/lizhifeng1994/DailyRecord.git name(仓库重，命名)</div></pre></td></tr></table></figure>
<p>检查当前文件状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<p>添加内容到下一次提交中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add file_name</div></pre></td></tr></table></figure>
<p>查看尚未暂存的文件更新了哪些部分，比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化的内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff</div><div class="line"></div><div class="line">git diff --cached/staged //查看已暂存的将要添加到下次提交里的内容</div></pre></td></tr></table></figure>
<p>提交。每一次提交操作，都是对你项目做一次快照，以后可以回到这个状态，或者进行比较</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"提交信息"</span></div></pre></td></tr></table></figure>
<p>移除文件。从暂存区移除，并连带从共工作目录中删除指定文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git rm file_name</div><div class="line"></div><div class="line">//如果删除之前已经修改并且已经放到暂存区的话，则必须使用强制删除选项 <span class="_">-f</span></div><div class="line">git rm <span class="_">-f</span> file_name</div><div class="line"></div><div class="line">//从暂存区域移除，但仍然保存在当前工作目录中。文件继续保留在磁盘中，但是git并不进行跟踪</div><div class="line">git rm --cached file_name</div></pre></td></tr></table></figure>
<p>移动文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git mv file_from file_to</div><div class="line"></div><div class="line">//其实相当于</div><div class="line">mv file_from file_to</div><div class="line">git rm file_form</div><div class="line">git add file_to</div></pre></td></tr></table></figure>
<p>查看提交历史</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git <span class="built_in">log</span> //按提交时间列出所有更新，最近的更新排在最上面</div><div class="line"></div><div class="line">git <span class="built_in">log</span> -p -2 //显示最近两次提交的内容差异</div></pre></td></tr></table></figure>
<p>此命令会将暂存区的文件提交。如果上次提交以来你还未做任何修改，那么快照保持不变，而你所修改的只是提交信息。文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"test"</span></div><div class="line">git add file1</div><div class="line">git commit --amend</div><div class="line">//最终只会有一个提交</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单谈谈触发器]]></title>
      <url>https://yoursite.com/2017/01/05/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在DailyReocrd中用到了触发器，这里做一个简单的记录和总结。</p>
<a id="more"></a>
<h2 id="1-什么是触发器"><a href="#1-什么是触发器" class="headerlink" title="1. 什么是触发器"></a>1. 什么是触发器</h2><p>触发器是在数据库中，在执行对数据有异动的动作时，先行拦截并处理的一种数据库对象。当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p>
<h2 id="2-触发器的相关操作"><a href="#2-触发器的相关操作" class="headerlink" title="2. 触发器的相关操作"></a>2. 触发器的相关操作</h2><h3 id="1-定义一个触发器"><a href="#1-定义一个触发器" class="headerlink" title="1. 定义一个触发器"></a>1. 定义一个触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">CREATE</span></div><div class="line">  [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</div><div class="line">  <span class="keyword">TRIGGER</span> trigger_name</div><div class="line">  trigger_time trigger_event</div><div class="line">  <span class="keyword">ON</span> tb_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line">  <span class="keyword">BEGIN</span></div><div class="line">    //sql_statement</div><div class="line">  <span class="keyword">END</span></div><div class="line"></div><div class="line">trigger_time: &#123; <span class="keyword">BEFORE</span> | <span class="keyword">AFTER</span> &#125;</div><div class="line"></div><div class="line">trigger_event: &#123; <span class="keyword">INSERT</span> | <span class="keyword">UPDATE</span> | <span class="keyword">DELETE</span> &#125;</div></pre></td></tr></table></figure>
<p>NEW和OLD用来访问受触发器影响的行中的列</p>
<ol>
<li><p>在INSERT触发器，因为没有原数据，所以只用NEW来表示新插入的数据</p>
</li>
<li><p>在DELETE触发器，因为没有新数据，所以只用OLD来表示删除的数据</p>
</li>
<li><p>在UPDATE触发器，用OLD来表示更新之前的数据，用NEW来表示更新之后的数据</p>
</li>
</ol>
<p>定义一个触发器要注意以下几点:</p>
<ol>
<li><p>触发器不能定义在临时表或者视图上</p>
</li>
<li><p>触发器命名唯一</p>
</li>
<li><p>OLD是只读的，在BEFORE触发器中，可以使用SET NEW.col_name更改其值，但是SET在AFTER中没有作用，因为行更改已经发生</p>
</li>
<li><p>在BEFORE触发器中，AUTO_INCREMENT列的NEW值为0，而不是实际插入新行时自动生成的序列号</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//关于第四点来做个实验</div><div class="line"></div><div class="line">//首先建立一个表，并且插入一条记录</div><div class="line">mysql&gt; select * from haha;</div><div class="line">+--------+----------+</div><div class="line">| testID | testNAME |</div><div class="line">+--------+----------+</div><div class="line">|      1 | 1        |</div><div class="line">+--------+----------+</div><div class="line">1 row in set</div><div class="line"></div><div class="line">//写一个触发器</div><div class="line">DROP TRIGGER IF EXISTS test_haha; </div><div class="line">CREATE TRIGGER test_haha</div><div class="line">BEFORE INSERT ON haha FOR EACH ROW</div><div class="line">BEGIN</div><div class="line">    IF NEW.testID = 0 THEN</div><div class="line">         SET NEW.testName = 100;</div><div class="line">    END IF;</div><div class="line">END;</div><div class="line"></div><div class="line">//然后再插入一条记录</div><div class="line">INSERT haha(testName) VALUES(10000)</div><div class="line"></div><div class="line">//再查看表</div><div class="line"></div><div class="line">mysql&gt; select * from haha;</div><div class="line">+--------+----------+</div><div class="line">| testID | testNAME |</div><div class="line">+--------+----------+</div><div class="line">|      1 | 1        |</div><div class="line">|      4 | 100      |</div><div class="line">+--------+----------+</div><div class="line">2 rows in set</div></pre></td></tr></table></figure>
<h3 id="2-查看触发器"><a href="#2-查看触发器" class="headerlink" title="2. 查看触发器"></a>2. 查看触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//查看触发器的详细信息</div><div class="line"><span class="keyword">show</span> <span class="keyword">TRIGGERS</span>;</div></pre></td></tr></table></figure>
<h3 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3. 删除触发器"></a>3. 删除触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] [schema_name.]trigger_name</div></pre></td></tr></table></figure>
<h2 id="3-触发器在个人项目中的作用"><a href="#3-触发器在个人项目中的作用" class="headerlink" title="3. 触发器在个人项目中的作用"></a>3. 触发器在个人项目中的作用</h2><p>业务需求：我对支出和收入都有一个标注账目，也就是对你有意义的账目，然后再首页将以列表的形式进行显示。</p>
<p>我的做法：建立一个标注账目表，然后对支出表和收入表建立触发器，触发器会更新(我这里删除只是逻辑删除)/新增标注账目表</p>
<p>UPDATE触发器有以下几种情况(以收入表为例)：</p>
<ol>
<li><p>当我是标注账目(OLD.SR_FLAG=”0” AND OLD.SR_STAR=”1” AND NEW.SR_STAR=”0”)进行撤销时<br>DELETE</p>
</li>
<li><p>当我不是标注账目然后把它标注成标注账目是OLD.SR_FLAG=”0” AND OLD.SR_STAR=”0” AND NEW.SR_STAR=”1”<br>INSERT</p>
</li>
<li><p>当我删除标注账目时(NEW.SR_FLAG=”1” AND OLD.SR_STAR=”1”)<br>DELETE</p>
</li>
<li><p>当我编辑这个账目的其他类容时(NEW.SR_FLAG=”0” AND NEW.SR_STAR=”1”)<br>UPDATE</p>
</li>
</ol>
<p>INSERT触发器比较简单，就是插入标注账目时，也对表标注账目表进行插入</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[不是影评--《坏孩子的天空》]]></title>
      <url>https://yoursite.com/2016/12/25/%E4%B8%8D%E6%98%AF%E5%BD%B1%E8%AF%84-%E3%80%8A%E5%9D%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E5%A4%A9%E7%A9%BA%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>先不说国产青春片是否狗血，最起码它非常不真实，用它来怀念逝去的青春，总感觉很荒诞。推荐一部日式青春片–《坏孩子的天空》。</p>
<p>没有三角恋！没有堕胎！</p>
<a id="more"></a>
<p><a href="http://www.bilibili.com/video/av1653790/" target="_blank" rel="external">观看地址</a></p>
<p>两个玩的非常好的高中生，一起上学，一起捣乱，一起逃课，正如影片所说的那样–坏孩子。由于抢劫，被一个职业拳击手教训一顿之后，信治接触了拳击，发誓报仇，把高木也扯了进来，高木出色的拳击天赋，慢慢的成为了一名职业拳坛上的一颗冉冉明星，信治发现自己不是学拳击的料，毅然决然的加入了酒吧认识的黑社会，也是混的风生水起……但是没有什么会一直顺利下去，高木练拳结识了同一个拳击社的小林，小林，可以说在我们的心目中，不是一个光明磊落的拳击手，他告诉高木出一些犯规的拳击动作，让高木染上喝酒的坏习惯，拳击社社长发现这些问题之后，竭力阻止，但是高木完全不听，还是和小林混在一起。混乱的生活习惯，让高木的力量，速度，反应力大不如前，体重增加，参赛受到限制，不得已采用了小林的建议——服用禁药来减少体重，彻底断送了高木的拳击生涯。然而，信治，由于亲睐他的黑社会老大被杀之后，又被新上的黑社会老大给踢了出来。</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image1.png?raw=true" alt="拳击训练照"></p>
<p>我非常喜欢这个画面，坚毅的面庞，认真的眼神，确实让人着迷。</p>
<p>影片中有很多细节</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image2.png?raw=true" alt="上课发呆"></p>
<p> 渡边——一个很普通，很老实的男生，喜欢女生，送一些可爱的小礼物，向女生写信，出来工作没有什么成绩，听取同事的意见，成为了一个出租车司机，工作本本分分，逆来顺受，最后出了车祸，导演给出了这个画面，破碎的玻璃，上面的那个瓷娃娃仍然是当时送给喜欢的女生那个瓷娃娃，一人一个。</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image7.png?raw=true" alt="车祸"></p>
<p> 拳击社社长是一个很识才的老头，可以说是导演设计的这个角色就像我们人生中的伯乐一样，看到高木的恨铁不成钢，气愤，挽留过，但又无能为力，直到高木在拳击场上被打倒的最后一刻，他都坚信——高木不是这样的，高木在他心目中还是那个他心目中的天才，正如他看高木打拳的时候说的那句话：</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image4.png?raw=true" alt="拳击社长"></p>
<p>最后结尾，导演给出了这样的画面：</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image5.png?raw=true" alt="结尾"></p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image6.png?raw=true" alt="结尾"></p>
<p>我觉得心酸，还是两个人，还是同样的操场，物是人非。这部电影说的是青春，一个被说烂的话题，但是却是一个永远都说不清楚的话题，你的青春里艳阳高照，我的青春里六月飞雪，其实没有谁的青春更残酷，也没有谁的青春更美好，都是那样，你注定回不去……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单谈谈视图]]></title>
      <url>https://yoursite.com/2016/12/25/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>在DailyReocrd中用到了视图，这里做一个简单的记录和总结。</p>
<a id="more"></a>
<h2 id="1-什么视图"><a href="#1-什么视图" class="headerlink" title="1. 什么视图"></a>1. 什么视图</h2><p>视图是在关系数据库中，将一组查询指令构成的结果集，组合成可查询的数据表的一种数据库对象。视图是一个虚拟表，行和列的定义来自由定义视图的查询所引用的表，并且在引用视图时动态生成。视图是不会存储数据的，在视图被引用的时候才派生出数据。</p>
<h2 id="2-视图的相关操作"><a href="#2-视图的相关操作" class="headerlink" title="2. 视图的相关操作"></a>2. 视图的相关操作</h2><h3 id="1-定义一个视图"><a href="#1-定义一个视图" class="headerlink" title="1. 定义一个视图"></a>1. 定义一个视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</div><div class="line">  <span class="keyword">AS</span></div><div class="line">select_statement</div></pre></td></tr></table></figure>
<h3 id="2-修改视图"><a href="#2-修改视图" class="headerlink" title="2. 修改视图"></a>2. 修改视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> test_view</div><div class="line">  <span class="keyword">AS</span></div><div class="line">select_statement</div></pre></td></tr></table></figure>
<h3 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3. 删除视图"></a>3. 删除视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</div></pre></td></tr></table></figure>
<h2 id="3-视图在个人项目中的应用"><a href="#3-视图在个人项目中的应用" class="headerlink" title="3. 视图在个人项目中的应用"></a>3. 视图在个人项目中的应用</h2><p>在我的个人项目中首先我有个业务需求：要查看这一年的每个月的收入和支出情况。<br>所以我对收入和支出分别建立一个月收入和月支出的视图。</p>
<p>首先我想到的是直接用SQL语句就行了，为什么要用视图呢？</p>
<p>然后我把SQL语句一写</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  <span class="string">`table_sr`</span>.<span class="string">`USER_ID`</span> <span class="keyword">AS</span> <span class="string">`USER_ID`</span>,</div><div class="line">  <span class="keyword">date_format</span>(</div><div class="line">    <span class="string">`table_sr`</span>.<span class="string">`SR_DATE`</span>,</div><div class="line">    <span class="string">'%Y-%m'</span></div><div class="line">  ) <span class="keyword">AS</span> <span class="string">`SR_MONTH`</span>,</div><div class="line">  <span class="keyword">count</span>(<span class="string">`table_sr`</span>.<span class="string">`SR_ID`</span>) <span class="keyword">AS</span> <span class="string">`SR_COUNT`</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="string">`table_sr`</span>.<span class="string">`SR_MONEY`</span>) <span class="keyword">AS</span> <span class="string">`SR_MONEY`</span></div><div class="line"><span class="keyword">FROM</span></div><div class="line">  <span class="string">`table_sr`</span></div><div class="line"><span class="keyword">WHERE</span></div><div class="line">  (<span class="string">`table_sr`</span>.<span class="string">`SR_FLAG`</span> = <span class="string">'0'</span>)</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">  <span class="string">`SR_MONTH`</span>,</div><div class="line">  <span class="string">`table_sr`</span>.<span class="string">`USER_ID`</span></div></pre></td></tr></table></figure>
<p>想想还是用视图吧，我的理由如下：</p>
<p>将复杂查询包装在视图中可以用来简化查询</p>
<p>不用管视图，我只要维护好真实表的内容，就可以保证视图的完整性了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单谈谈存储过程]]></title>
      <url>https://yoursite.com/2016/12/23/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>在DailyReocrd中用到了存储过程，这里做一个简单的记录和总结。</p>
<a id="more"></a>
<h2 id="1-什么是存储过程？"><a href="#1-什么是存储过程？" class="headerlink" title="1. 什么是存储过程？"></a>1. 什么是存储过程？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>存储过程:是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象，它可以视为数据库中的一种函数或子程序。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol>
<li><p>定义存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE PROCEDURE procedure_name</div><div class="line">(</div><div class="line">  [ IN | OUT | INOUT ] param_name <span class="built_in">type</span></div><div class="line">)</div><div class="line">BEGIN</div><div class="line">  //SQL statement</div><div class="line">END</div></pre></td></tr></table></figure>
<p>IN 输入参数<br>表示该参数的值必须在调用存储过程中调用，在存储过程中该参数的值不能被返回，为默认值</p>
<p>OUT 输出参数<br>可在存储过程内部被改变，并可返回</p>
<p>INOUT 输入输出参数<br>调用时指定，并且可改变和返回</p>
</li>
<li><p>调用存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CALL procedure_name</div><div class="line">(</div><div class="line">  //输入参数 也就是定义为IN和INOUT</div><div class="line">  //输出参数 @param_name</div><div class="line">  //参数的顺序要与定义时的顺序一样</div><div class="line">)</div><div class="line"></div><div class="line">例如下面试调用一个没有输入参数，只有输出参数的存储过程，并得到存储过程的返回值</div><div class="line">call <span class="built_in">test</span>(@out);</div><div class="line">select @out;</div></pre></td></tr></table></figure>
</li>
<li><p>删除存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP PROCEDURE procedure_name</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-存储过程的优缺点"><a href="#2-存储过程的优缺点" class="headerlink" title="2. 存储过程的优缺点?"></a>2. 存储过程的优缺点?</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><p>对复杂的业务逻辑，存储过程可以进行封装，既简化程序，也可以网络流量之间的消耗</p>
</li>
<li><p>存储过程只在创造时进行编译，而SQL语句每执行一次就编译一次，使用存储过程可以提高数据库的执行速度</p>
</li>
<li><p>存储过程可以接受多个参数，也可以返回多个参数，非常灵活</p>
</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>受制于不同数据库，移植性差</li>
</ol>
<h2 id="3-个人项目中对存储过程的使用"><a href="#3-个人项目中对存储过程的使用" class="headerlink" title="3. 个人项目中对存储过程的使用"></a>3. 个人项目中对存储过程的使用</h2><p>在我的个人项目DailyRecord中，我在两个地方用了存储过程，这两个地方业务需求差不多，我就挑一个讲讲。</p>
<p>在我的首页中需要显示我的总支出数目、总收入数目和总账目数，加入不用存储过程，我的解决方法是：<br>1.去支出表得到总支出金额和总支出账目数<br>2.去收入表得到总收入金额和总收入账目数<br>3.然后将总支出账目数和总收入账目数相加得到总账目数<br>然后我用存储过程将上面封装起来，给三个传出参数即可，只要调用该存储过程即可，非常方便，并且不容易出错。</p>
<p>还有一个小建议：<br>如果你的的存储过程有输出参数，直接在存储过程中<code>SELECT 输出参数</code>，调用存储过程就可以直接获得结果，比较方便。</p>
<blockquote>
<p>当你业务需求比较复杂，需要进行多表、多SQL操作，可以将其封装成一个存储过程，提高性能，简化工作</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何搭建一个个人博客]]></title>
      <url>https://yoursite.com/2016/12/20/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>Hexo+Github搭建一个个人博客</p>
<a id="more"></a>
<h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1.安装NodeJS"></a>1.安装NodeJS</h2><p>这里就不一一详述了，给大家推荐一篇<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">文章</a>,按照上面的步骤来即可。</p>
<h2 id="2-注册Github-安装Git"><a href="#2-注册Github-安装Git" class="headerlink" title="2.注册Github,安装Git"></a>2.注册Github,安装Git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">下载Git</a></p>
<p><a href="https://github.com/" target="_blank" rel="external">Github注册</a></p>
<p><a href="http://www.cnblogs.com/peterzd/archive/2012/04/22/2465230.html" target="_blank" rel="external">然后配置Git</a></p>
<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></p>
<p>打开命令行工具，按照以下输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>浏览器输入localhost:4000就可以在本地看到你的个人博客了</p>
<h2 id="4-MarkDown写博客"><a href="#4-MarkDown写博客" class="headerlink" title="4.MarkDown写博客"></a>4.MarkDown写博客</h2><p>真心推荐MarkDown来写文章也好，做笔记也好</p>
<ol>
<li><p>简洁</p>
</li>
<li><p>方便</p>
</li>
</ol>
<p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">详细了解</a></p>
<h2 id="5-提交到Github"><a href="#5-提交到Github" class="headerlink" title="5.提交到Github"></a>5.提交到Github</h2><p>先在本地把内容都编辑好</p>
<p>这里你要在Github建立一个仓库(repository)</p>
<p><em>注意了，仓库的命名必须是Github用户名.github.io</em></p>
<p>改一下配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:username/username.github.io.git //具体看你的地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo generate //转换成静态文件</div><div class="line">hexo deploy //提交到Github</div><div class="line">这里可能会报错  error deployer not found:git</div><div class="line">运行这个命令npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>在浏览器输入https:username.github.io就可以看到你的个人博客了</p>
<blockquote>
<p>写的很匆忙，然后可能没接触过nodejs会有点困难，关于MarkDown和Hexo这里也介绍的很简单，其实搭建完成之后就是用MarkDown写好文章，提交到Github。Hexo官网文档很舒服，然后也有很多博客主题给你选择，我觉得还是蛮好的。然后Git和Github网上资料也是很多的。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
