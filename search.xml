<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[不是影评--《坏孩子的天空》]]></title>
      <url>https://yoursite.com/2016/12/25/%E4%B8%8D%E6%98%AF%E5%BD%B1%E8%AF%84-%E3%80%8A%E5%9D%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E5%A4%A9%E7%A9%BA%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>先不说国产青春片是否狗血，最起码它非常不真实，用它来怀念逝去的青春，总感觉很荒诞。推荐一部日式青春片–《坏孩子的天空》。</p>
<p>没有三角恋！没有堕胎！</p>
<a id="more"></a>
<p><a href="http://www.bilibili.com/video/av1653790/" target="_blank" rel="external">观看地址</a></p>
<p>两个玩的非常好的高中生，一起上学，一起捣乱，一起逃课，正如影片所说的那样–坏孩子。由于抢劫，被一个职业拳击手教训一顿之后，信治接触了拳击，发誓报仇，把高木也扯了进来，高木出色的拳击天赋，慢慢的成为了一名职业拳坛上的一颗冉冉明星，信治发现自己不是学拳击的料，毅然决然的加入了酒吧认识的黑社会，也是混的风生水起……但是没有什么会一直顺利下去，高木练拳结识了同一个拳击社的小林，小林，可以说在我们的心目中，不是一个光明磊落的拳击手，他告诉高木出一些犯规的拳击动作，让高木染上喝酒的坏习惯，拳击社社长发现这些问题之后，竭力阻止，但是高木完全不听，还是和小林混在一起。混乱的生活习惯，让高木的力量，速度，反应力大不如前，体重增加，参赛受到限制，不得已采用了小林的建议——服用禁药来减少体重，彻底断送了高木的拳击生涯。然而，信治，由于亲睐他的黑社会老大被杀之后，又被新上的黑社会老大给踢了出来。</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image1.png?raw=true" alt="拳击训练照"></p>
<p>我非常喜欢这个画面，坚毅的面庞，认真的眼神，确实让人着迷。</p>
<p>影片中有很多细节</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image2.png?raw=true" alt="上课发呆"></p>
<p> 渡边——一个很普通，很老实的男生，喜欢女生，送一些可爱的小礼物，向女生写信，出来工作没有什么成绩，听取同事的意见，成为了一个出租车司机，工作本本分分，逆来顺受，最后出了车祸，导演给出了这个画面，破碎的玻璃，上面的那个瓷娃娃仍然是当时送给喜欢的女生那个瓷娃娃，一人一个。</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image7.png?raw=true" alt="车祸"></p>
<p> 拳击社社长是一个很识才的老头，可以说是导演设计的这个角色就像我们人生中的伯乐一样，看到高木的恨铁不成钢，气愤，挽留过，但又无能为力，直到高木在拳击场上被打倒的最后一刻，他都坚信——高木不是这样的，高木在他心目中还是那个他心目中的天才，正如他看高木打拳的时候说的那句话：</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image4.png?raw=true" alt="拳击社长"></p>
<p>最后结尾，导演给出了这样的画面：</p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image5.png?raw=true" alt="结尾"></p>
<p><img src="https://github.com/lizhifeng1994/MarkDownPhoto/blob/master/Image6.png?raw=true" alt="结尾"></p>
<p>我觉得心酸，还是两个人，还是同样的操场，物是人非。这部电影说的是青春，一个被说烂的话题，但是却是一个永远都说不清楚的话题，你的青春里艳阳高照，我的青春里六月飞雪，其实没有谁的青春更残酷，也没有谁的青春更美好，都是那样，你注定回不去……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单谈谈视图]]></title>
      <url>https://yoursite.com/2016/12/25/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>在DailyReocrd中用到了视图，这里做一个简单的记录和总结。</p>
<a id="more"></a>
<h2 id="1-什么视图"><a href="#1-什么视图" class="headerlink" title="1. 什么视图"></a>1. 什么视图</h2><p>视图是在关系数据库中，将一组查询指令构成的结果集，组合成可查询的数据表的一种数据库对象。视图是一个虚拟表，行和列的定义来自由定义视图的查询所引用的表，并且在引用视图时动态生成。视图是不会存储数据的，在视图被引用的时候才派生出数据。</p>
<h2 id="2-视图的相关操作"><a href="#2-视图的相关操作" class="headerlink" title="2. 视图的相关操作"></a>2. 视图的相关操作</h2><h3 id="1-定义一个视图"><a href="#1-定义一个视图" class="headerlink" title="1. 定义一个视图"></a>1. 定义一个视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</div><div class="line">  <span class="keyword">AS</span></div><div class="line">select_statement</div></pre></td></tr></table></figure>
<h3 id="2-修改视图"><a href="#2-修改视图" class="headerlink" title="2. 修改视图"></a>2. 修改视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> test_view</div><div class="line">  <span class="keyword">AS</span></div><div class="line">select_statement</div></pre></td></tr></table></figure>
<h3 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3. 删除视图"></a>3. 删除视图</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</div></pre></td></tr></table></figure>
<h2 id="3-视图在个人项目中的应用"><a href="#3-视图在个人项目中的应用" class="headerlink" title="3. 视图在个人项目中的应用"></a>3. 视图在个人项目中的应用</h2><p>在我的个人项目中首先我有个业务需求：要查看这一年的每个月的收入和支出情况。<br>所以我对收入和支出分别建立一个月收入和月支出的视图。</p>
<p>首先我想到的是直接用SQL语句就行了，为什么要用视图呢？</p>
<p>然后我把SQL语句一写</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  <span class="string">`table_sr`</span>.<span class="string">`USER_ID`</span> <span class="keyword">AS</span> <span class="string">`USER_ID`</span>,</div><div class="line">  <span class="keyword">date_format</span>(</div><div class="line">    <span class="string">`table_sr`</span>.<span class="string">`SR_DATE`</span>,</div><div class="line">    <span class="string">'%Y-%m'</span></div><div class="line">  ) <span class="keyword">AS</span> <span class="string">`SR_MONTH`</span>,</div><div class="line">  <span class="keyword">count</span>(<span class="string">`table_sr`</span>.<span class="string">`SR_ID`</span>) <span class="keyword">AS</span> <span class="string">`SR_COUNT`</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="string">`table_sr`</span>.<span class="string">`SR_MONEY`</span>) <span class="keyword">AS</span> <span class="string">`SR_MONEY`</span></div><div class="line"><span class="keyword">FROM</span></div><div class="line">  <span class="string">`table_sr`</span></div><div class="line"><span class="keyword">WHERE</span></div><div class="line">  (<span class="string">`table_sr`</span>.<span class="string">`SR_FLAG`</span> = <span class="string">'0'</span>)</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">  <span class="string">`SR_MONTH`</span>,</div><div class="line">  <span class="string">`table_sr`</span>.<span class="string">`USER_ID`</span></div></pre></td></tr></table></figure>
<p>想想还是用视图吧，我的理由如下：</p>
<p>将复杂查询包装在视图中可以用来简化查询</p>
<p>不用管视图，我只要维护好真实表的内容，就可以保证视图的完整性了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单谈谈存储过程]]></title>
      <url>https://yoursite.com/2016/12/23/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>在DailyReocrd中用到了存储过程，这里做一个简单的记录和总结。</p>
<a id="more"></a>
<h2 id="1-什么是存储过程？"><a href="#1-什么是存储过程？" class="headerlink" title="1. 什么是存储过程？"></a>1. 什么是存储过程？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>存储过程:是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象，它可以视为数据库中的一种函数或子程序。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol>
<li><p>定义存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE PROCEDURE procedure_name</div><div class="line">(</div><div class="line">  [ IN | OUT | INOUT ] param_name <span class="built_in">type</span></div><div class="line">)</div><div class="line">BEGIN</div><div class="line">  //SQL statement</div><div class="line">END</div></pre></td></tr></table></figure>
<p>IN 输入参数<br>表示该参数的值必须在调用存储过程中调用，在存储过程中该参数的值不能被返回，为默认值</p>
<p>OUT 输出参数<br>可在存储过程内部被改变，并可返回</p>
<p>INOUT 输入输出参数<br>调用时指定，并且可改变和返回</p>
</li>
<li><p>调用存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CALL procedure_name</div><div class="line">(</div><div class="line">  //输入参数 也就是定义为IN和INOUT</div><div class="line">  //输出参数 @param_name</div><div class="line">  //参数的顺序要与定义时的顺序一样</div><div class="line">)</div><div class="line"></div><div class="line">例如下面试调用一个没有输入参数，只有输出参数的存储过程，并得到存储过程的返回值</div><div class="line">call <span class="built_in">test</span>(@out);</div><div class="line">select @out;</div></pre></td></tr></table></figure>
</li>
<li><p>删除存储过程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP PROCEDURE procedure_name</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-存储过程的优缺点"><a href="#2-存储过程的优缺点" class="headerlink" title="2. 存储过程的优缺点?"></a>2. 存储过程的优缺点?</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><p>对复杂的业务逻辑，存储过程可以进行封装，既简化程序，也可以网络流量之间的消耗</p>
</li>
<li><p>存储过程只在创造时进行编译，而SQL语句每执行一次就编译一次，使用存储过程可以提高数据库的执行速度</p>
</li>
<li><p>存储过程可以接受多个参数，也可以返回多个参数，非常灵活</p>
</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>受制于不同数据库，移植性差</li>
</ol>
<h2 id="3-个人项目中对存储过程的使用"><a href="#3-个人项目中对存储过程的使用" class="headerlink" title="3. 个人项目中对存储过程的使用"></a>3. 个人项目中对存储过程的使用</h2><p>在我的个人项目DailyRecord中，我在两个地方用了存储过程，这两个地方业务需求差不多，我就挑一个讲讲。</p>
<p>在我的首页中需要显示我的总支出数目、总收入数目和总账目数，加入不用存储过程，我的解决方法是：<br>1.去支出表得到总支出金额和总支出账目数<br>2.去收入表得到总收入金额和总收入账目数<br>3.然后将总支出账目数和总收入账目数相加得到总账目数<br>然后我用存储过程将上面封装起来，给三个传出参数即可，只要调用该存储过程即可，非常方便，并且不容易出错。</p>
<p>还有一个小建议：<br>如果你的的存储过程有输出参数，直接在存储过程中<code>SELECT 输出参数</code>，调用存储过程就可以直接获得结果，比较方便。</p>
<blockquote>
<p>当你业务需求比较复杂，需要进行多表、多SQL操作，可以将其封装成一个存储过程，提高性能，简化工作</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何搭建一个个人博客]]></title>
      <url>https://yoursite.com/2016/12/20/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>Hexo+Github搭建一个个人博客</p>
<a id="more"></a>
<h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1.安装NodeJS"></a>1.安装NodeJS</h2><p>这里就不一一详述了，给大家推荐一篇<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">文章</a>,按照上面的步骤来即可。</p>
<h2 id="2-注册Github-安装Git"><a href="#2-注册Github-安装Git" class="headerlink" title="2.注册Github,安装Git"></a>2.注册Github,安装Git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">下载Git</a></p>
<p><a href="https://github.com/" target="_blank" rel="external">Github注册</a></p>
<p><a href="http://www.cnblogs.com/peterzd/archive/2012/04/22/2465230.html" target="_blank" rel="external">然后配置Git</a></p>
<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></p>
<p>打开命令行工具，按照以下输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>浏览器输入localhost:4000就可以在本地看到你的个人博客了</p>
<h2 id="4-MarkDown写博客"><a href="#4-MarkDown写博客" class="headerlink" title="4.MarkDown写博客"></a>4.MarkDown写博客</h2><p>真心推荐MarkDown来写文章也好，做笔记也好</p>
<ol>
<li><p>简洁</p>
</li>
<li><p>方便</p>
</li>
</ol>
<p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">详细了解</a></p>
<h2 id="5-提交到Github"><a href="#5-提交到Github" class="headerlink" title="5.提交到Github"></a>5.提交到Github</h2><p>先在本地把内容都编辑好</p>
<p>这里你要在Github建立一个仓库(repository)</p>
<p><em>注意了，仓库的命名必须是Github用户名.github.io</em></p>
<p>改一下配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:username/username.github.io.git //具体看你的地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo generate //转换成静态文件</div><div class="line">hexo deploy //提交到Github</div><div class="line">这里可能会报错  error deployer not found:git</div><div class="line">运行这个命令npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>在浏览器输入https:username.github.io就可以看到你的个人博客了</p>
<blockquote>
<p>写的很匆忙，然后可能没接触过nodejs会有点困难，关于MarkDown和Hexo这里也介绍的很简单，其实搭建完成之后就是用MarkDown写好文章，提交到Github。Hexo官网文档很舒服，然后也有很多博客主题给你选择，我觉得还是蛮好的。然后Git和Github网上资料也是很多的。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
